package xmslogmerge;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dwolansk
 */
public class XMSLogMergeGUI extends javax.swing.JFrame {
    DefaultListModel FileListModel = new DefaultListModel();
    /**
     * Creates new form XMSLogMergeGUI
     */
    public XMSLogMergeGUI() {
        initComponents();
        //FileListModel=new DefaultListModel();
        //FileList
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddDirectory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        FileList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        MergeButton = new javax.swing.JButton();
        AddFile = new javax.swing.JButton();
        DiagramButton = new javax.swing.JButton();
        SaveFileButton = new javax.swing.JButton();
        SaveFileName = new javax.swing.JTextField();
        OpenButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        startstring = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AddDirectory.setText("Add Directory");
        AddDirectory.setActionCommand("AddDirectory");
        AddDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDirectoryActionPerformed(evt);
            }
        });

        FileList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jScrollPane1.setViewportView(FileList);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("XMS Log Merge Tool");

        MergeButton.setText("Merge");
        MergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MergeButtonActionPerformed(evt);
            }
        });

        AddFile.setText("Add File");
        AddFile.setActionCommand("AddFile");
        AddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFileActionPerformed(evt);
            }
        });

        DiagramButton.setText("Diagram");
        DiagramButton.setActionCommand("BuildDiagram");

        SaveFileButton.setText("...");
        SaveFileButton.setActionCommand("SaveFile");
        SaveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileButtonActionPerformed(evt);
            }
        });

        SaveFileName.setText("XMSLogs.txt");

        OpenButton.setText("Open");
        OpenButton.setEnabled(false);
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Starting Text line or timestamp in yyyy-mm-dd hh:mm:ss.msec format");

        startstring.setText("2013-01-01 15:58:49.362561 xxxxxxxxxxxxxxxxx");

        jLabel3.setText("Output File name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(SaveFileName)
                        .addGap(18, 18, 18)
                        .addComponent(SaveFileButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(MergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194)
                        .addComponent(OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(203, 347, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(startstring))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(AddDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AddFile, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DiagramButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddDirectory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AddFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DiagramButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startstring, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SaveFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SaveFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MergeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFileActionPerformed
        // TODO add your handling code here:
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("select file");
            //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setMultiSelectionEnabled(true);
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
                    System.out.println("getCurrentDirectory(): " 
                    +  chooser.getCurrentDirectory());
                    System.out.println("getSelectedFile() : " 
                    +  chooser.getSelectedFile());
          
                   for(File selected : chooser.getSelectedFiles())
                   FileListModel.addElement(selected);
                   FileList.setModel(FileListModel);
                   
                  
          }
        else {
          System.out.println("No Selection ");
          }
        
    }//GEN-LAST:event_AddFileActionPerformed

    private void AddDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDirectoryActionPerformed
        // TODO add your handling code here:
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("select folder");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
                    System.out.println("getCurrentDirectory(): " 
                    +  chooser.getCurrentDirectory() + "    tostring="+chooser.getSelectedFile().toString() );
                    System.out.println("getSelectedFile() : " 
                    +  chooser.getSelectedFile());
                    
                String path = chooser.getSelectedFile().toString()+"\\";
                //    String path = ".";
                System.out.println(path);
                String files;
                File folder = new File(path);
                File[] listOfFiles = folder.listFiles(); 
                
                for (int i = 0; i < listOfFiles.length; i++) 
                {

                 if (listOfFiles[i].isFile()) 
                 {
                   FileListModel.addElement(path+listOfFiles[i].getName());
                   
                 }
                 
            }
          }
        else {
          System.out.println("No Selection ");
          }
            FileList.setModel(FileListModel);
    }//GEN-LAST:event_AddDirectoryActionPerformed

    
       List<String> deleteaftermergelist=new ArrayList<String>();
    private String ConvertPcap(String filename) throws IOException {
        String localParseString=pcapParserString;
            String convertedfilename=filename+".xmslogmergeconverted.txt";
            localParseString=localParseString.replace("%INSERT_FILENAME%", filename);
          
            String printline;
            Process p = null;
     try {
         final String command;
         command= "\"C:\\program Files\\Wireshark\\tshark.exe\" -t ad -r \"%INSERT_FILENAME%\" -Y \"stun || dtls || sip || http || tcp.port==81 || udp.port==81 || tcp.port==5060 || udp.port==5060\" > output";
         p = Runtime.getRuntime().exec(localParseString);
         //p = Runtime.getRuntime().exec(command);
     } catch (IOException ex) {
         Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
     }
            BufferedWriter bw=null;
        try {
            bw = new BufferedWriter(new FileWriter(convertedfilename));
           
        } catch (IOException ex) {
            System.out.println("EXCEPTION!!!");
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
        try {
            while ((printline = input.readLine()) != null) {
                String strippedprintline=printline.substring(printline.indexOf(" ")+1);
                bw.write(strippedprintline+"\n");
                System.out.println(strippedprintline);
            }
        } catch (IOException ex) {
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            input.close();
            bw.flush();
            bw.close();
            // p.waitFor();
            
        deleteaftermergelist.add(convertedfilename);
        
        return convertedfilename;
    }
    private String CheckForPcap(String filename){
        if(filename.endsWith(".pcap") || filename.endsWith(".cap") || filename.endsWith(".pcapng")){
            Object[] options={"Yes","No"};
            int choice= JOptionPane.showOptionDialog(null,
                "Network Capture detected:\n"+filename+"\ndo you wish to convert to a mergable format?",
                "Convert Network Capture",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,options,options[0]);
            if(choice == 0 ){
                try {
                    return ConvertPcap(filename);
                } catch (IOException ex) {
                    Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                return filename;
            }
        }
        return filename;
    }
    private void MergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MergeButtonActionPerformed
        // TODO add your handling code here:
        
        List<String> selected=FileList.getSelectedValuesList();
        FileInputStream fstream = null;
        ArrayList<BufferedReader> infiles = new ArrayList<BufferedReader>();
        Map<BufferedReader,String> NextLineMap = new HashMap<BufferedReader,String>();
        Map<BufferedReader,String> FileNameMap = new HashMap<BufferedReader,String>();
        String LineToBeWritten="";
        BufferedReader LastBr=null;
        
        BufferedWriter bw=null;
        try {
            bw = new BufferedWriter(new FileWriter(SaveFileName.getText()));
            bw.write("Startline:\n"+startstring.getText()+"\n");
            bw.write("Merged Log Set:\n");
        } catch (IOException ex) {
            System.out.println("EXCEPTION!!!");
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Open a new reader for each file
        for(String filename : selected){
            String Checkedfilename = CheckForPcap(filename);
            System.out.println(Checkedfilename);
            try {
                bw.write(Checkedfilename+"\n");
                 
            } catch (IOException ex) {
                Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            try {
                BufferedReader br=new BufferedReader(new FileReader(new File(Checkedfilename)));
                infiles.add(br);
                FileNameMap.put(br, Checkedfilename);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        System.out.println("-------");
        try {
            bw.write("-----------------------------------------------------------------------------------------------------\n");
        } catch (IOException ex) {
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Load the first string for each into the map
        for(BufferedReader br: infiles){
            try {
                String line = br.readLine();
                System.out.println(line);
                System.out.println("-------");
                NextLineMap.put(br, line );
            } catch (IOException ex) {
                Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        //Open the output folder
        
        System.out.println(NextLineMap.toString());
        System.out.println("-------!@#$%#@$%^#$%^Y-------");
        while(!NextLineMap.isEmpty()){
            for(BufferedReader br: infiles){
                String nextline = NextLineMap.get(br);
                if(nextline != null){
                    if(LineToBeWritten.isEmpty() || ( nextline.compareTo(LineToBeWritten) < 0)){
                           LineToBeWritten=NextLineMap.get(br);
                           LastBr=br;         
                    }
                } else {
                    infiles.remove(br);
                    try {
                        br.close();
                    } catch (IOException ex) {
                        Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
            boolean oktowrite=false;
            if(LineToBeWritten.compareTo(startstring.getText()) >= 0){
                oktowrite=true;
            }
            
            try {
                if(oktowrite)
                bw.write(LineToBeWritten + "  ["+FileNameMap.get(LastBr).substring(FileNameMap.get(LastBr).lastIndexOf("\\")+1)+"]\n");
             }  catch (IOException ex) {
                Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(oktowrite)
            System.out.println(LineToBeWritten + "  ["+FileNameMap.get(LastBr).substring(FileNameMap.get(LastBr).lastIndexOf("\\")+1)+"]");
            
            String nextline="";
            try {
                boolean keeplooping=true;
                NextLineMap.remove(LastBr);
                while(keeplooping){
                    if(LastBr !=null){
                        nextline = LastBr.readLine();
                        if(nextline==null){
                            //System.out.println("-------!@#$%#@ REMOVEING "+FileNameMap.get(LastBr)+" $%^#$%^Y-------");
                            //NextLineMap.remove(LastBr);
                            infiles.remove(LastBr);
                            keeplooping=false;   
                        } else{
                         
                                   
                        if(nextline.matches("^(19|20)\\d{2}-\\d{2}-\\d{2}.*")){
                         //   System.out.println("  ["+FileNameMap.get(LastBr).substring(FileNameMap.get(LastBr).lastIndexOf("\\")+1)+"]");
                            NextLineMap.put(LastBr,nextline );
                            keeplooping=false;
                        } else if(nextline.matches("^\\d{2}.\\d{2}.(19|20)\\d{2}.*")){
                            //change the datestamp
                            String month=nextline.substring(0, 2);
                            String day=nextline.substring(3,5);
                            String year=nextline.substring(6, 10);
                            String entry=nextline.substring(10);
                            nextline=year+"-"+month+"-"+day+entry;
                            NextLineMap.put(LastBr,nextline );
                            keeplooping=false;
                        }
                            else {
                            if(oktowrite){
                                System.out.println(nextline);
                                bw.write(nextline+"\n");
                            }
                        }
                       } 
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
                NextLineMap.remove(LastBr);
            }
            try {
                bw.flush();
            } catch (IOException ex) {
                Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            LineToBeWritten="";
            LastBr=null;
        }
        try {
            bw.close();
        } catch (IOException ex) {
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
     for(String filename : deleteaftermergelist)   {
        File file = new File(filename);
 
    		if(file.delete()){
    			System.out.println(file.getName() + " is deleted!");
    		}else{
    			System.out.println("Delete operation is failed.  " + filename);
    		}
                
    }
        OpenButton.setEnabled(true);
        JOptionPane.showMessageDialog(this, "Merge Complete");
    }//GEN-LAST:event_MergeButtonActionPerformed

    private void SaveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileButtonActionPerformed
        // TODO add your handling code here:
        
        // TODO add your handling code here:
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("select file");
            //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
                    System.out.println("getCurrentDirectory(): " 
                    +  chooser.getCurrentDirectory());
                    System.out.println("getSelectedFile() : " 
                    +  chooser.getSelectedFile());
                    
        
                   SaveFileName.setText(chooser.getSelectedFile().toString());
                   
                  
          }
        else {
          System.out.println("No Selection ");
          }
    }//GEN-LAST:event_SaveFileButtonActionPerformed

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        // TODO add your handling code here:
        Process p = null;
        try {
            String command=texteditor+" "+SaveFileName.getText();
            System.out.println(command);
            //p = Runtime.getRuntime().exec(localParseString);
            p = Runtime.getRuntime().exec(command );
        } catch (IOException ex) {
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_OpenButtonActionPerformed
    
    
    String pcapParserString="\"C:\\program Files\\Wireshark\\tshark.exe\" -t ad -r \"%INSERT_FILENAME%\" -Y \"stun || sip || http || tcp.port==81 || udp.port==81 || tcp.port==5060 || udp.port==5060\" ";
    static String texteditor="notepad";
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
        
         Properties prop = new Properties();
        try {
            prop.load(new FileInputStream("config.properties"));
             texteditor=prop.getProperty("TextEditor");
        } catch (IOException ex) {
            Logger.getLogger(XMSLogMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
 
               
                
         
               
         
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XMSLogMergeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XMSLogMergeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XMSLogMergeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XMSLogMergeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XMSLogMergeGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDirectory;
    private javax.swing.JButton AddFile;
    private javax.swing.JButton DiagramButton;
    private javax.swing.JList FileList;
    private javax.swing.JButton MergeButton;
    private javax.swing.JButton OpenButton;
    private javax.swing.JButton SaveFileButton;
    private javax.swing.JTextField SaveFileName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField startstring;
    // End of variables declaration//GEN-END:variables
}
